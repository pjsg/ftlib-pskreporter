#!/usr/bin/env python
"""
FTx sender to PSKReporter

Usage:
  pskreporter-sender [options]  <logfile> [<mode>]
  pskreporter-sender -h | --help

Options:
  -h --help     Show this screen.
  --no-send     Don't send, just print the spots
  --tcp         Use TCP to send reports
  --callsign=<callsign>    The callsign of the reporter
  --locator=<locator>     The locator for the radio -- at least 6 characters
  --antenna=<antenna>     The antenna used on the radio
"""

from pskreporter import PskReporter
import re
from datetime import datetime, time, timezone
import subprocess
from docopt import docopt
import sys
import logging
import signal


def get_unix_timestamp(hhmm: str) -> int:
    # Get the current date and time
    now = datetime.now()
    today = now.date()

    # Parse the HHMM string
    hours = int(hhmm[:2])
    minutes = int(hhmm[2:])

    # Create a datetime object for today at the specified time
    specified_time = datetime.combine(today, time(hours, minutes))

    # If the specified time is in the future, move to the previous day
    if specified_time > now:
        specified_time -= datetime.timedelta(days=1)

    # Get the Unix timestamp
    unix_timestamp = int(specified_time.timestamp())

    return unix_timestamp


def do_wspr(stream, pskreporter, mode):
    r1 = re.compile(
        r"(?P<ts>[0-9]{4}) +(?P<snr>[-0-9]+) +(?P<u2>[-.0-9]+) +(?P<freq>[0-9.]+) +(?P<u3>[-.0-9]+) +<?(?P<callsign>[A-Z0-9][A-Z0-9/-]+)>? +(?P<locator>[A-Z0-9]+) +(?P<power>[0-9]+) *$"
    )
    r2 = re.compile(
        r"(?P<ymd>[0-9]{6}) +(?P<ts>[0-9]{4}) +(?P<u1>[-.0-9]+) +(?P<snr>[-0-9]+) +(?P<u2>[-.0-9]+) +(?P<freq>[0-9.]+) +<?(?P<callsign>[A-Z0-9][A-Z0-9/-]+)>? +(?P<locator>[A-Z0-9]+) +(?P<power>[0-9]+)"
    )
    raw_bits_r = re.compile(r"^(?P<msg>.*?)\s+#(?P<hex>[0-9a-fA-F]{16,})")
    for line in stream:
        # 0044 -26  0.2  14.097059  0  W5NR EM10 23
        # or
        # 241104 0024  0.21 -18  0.02   18.1060273 N3BBF          FM19   37  0    2

        original_line = line.decode("utf-8").rstrip()

        line = original_line

        try:
            m = raw_bits_r.search(line)
            if m:
                raw_hex = m.group("hex")
                line = m.group("msg")
            else:
                raw_hex = None

            m = r1.search(line)
            if not m:
                m = r2.search(line)

            if m:
                ts = get_unix_timestamp(m.group("ts"))
                snr = int(m.group("snr"))
                freq = 1000000.0 * float(m.group("freq"))

                pskreporter.spot(
                    callsign=m.group("callsign"),
                    mode=mode,
                    timestamp=ts,
                    frequency=freq,
                    db=snr,
                    locator=m.group("locator"),
                    hexbytes=raw_hex,
                )
            elif not line.startswith(b"<Decode"):
                print(line)
        except Exception as e:
            logging.error(f"Failed to create spot ({e}): {original_line}")


def submit(stream, pskreporter, mode):
    r = re.compile(
        r"(?P<ts>[0-9/]+ [0-9:]+) +(?P<snr>[-0-9]+) +(?P<dt>[-+.0-9]+) (?P<freq>[0-9,.]+) ~ (?P<msg>.*)$"
    )
    cq = re.compile(
        r"CQ (DX )?(?P<callsign>[A-Z0-9/-]{3,}) (?P<locator>[A-Z][A-Z][0-9][0-9]) *$"
    )
    cq2 = re.compile(r"CQ (DX )?(?P<callsign>[A-Z0-9/-]{3,}) *(?P<locator>)$")
    tx2 = re.compile(
        r"(?P<their_callsign>([A-Z0-9/-]{3,})|(<\.\.\.>)) (?P<callsign>[A-Z0-9/-]{3,}) (?P<locator>[A-Z][A-Z][0-9][0-9]) *$"
    )
    raw_bits_r = re.compile(r"^(?P<msg>.*?)\s+#(?P<hex>[0-9a-fA-F]{16,})")
    for line in stream:
        # 2024/05/02 02:01:00  18 +1.44 7,075,718.8 ~ CQ NF3R FN20   #abcdef0123456789
        # 2024/05/02 02:01:00  18 +0.88 7,074,100.0 ~ CQ EA7LZ IM76

        original_line = line.decode("utf-8").rstrip()

        line = original_line

        try:
            m = raw_bits_r.search(line)
            if m:
                raw_hex = m.group("hex")
                line = m.group("msg")
            else:
                raw_hex = None

            m = r.search(line)
            if m:
                msg = m.group("msg")
                match = cq.search(msg)
                if not match:
                    match = cq2.search(msg)
                if not match:
                    match = tx2.search(msg)
                    if match and match.group("locator") == "RR73":
                        match = None
                if match:
                    ts = datetime.strptime(
                        m.group("ts"), "%Y/%m/%d %H:%M:%S"
                    ).timestamp()
                    snr = -int(m.group("snr"))
                    freq = float(m.group("freq").replace(",", ""))

                    pskreporter.spot(
                        callsign=match.group("callsign"),
                        mode=mode,
                        timestamp=ts,
                        frequency=freq,
                        db=snr,
                        locator=match.group("locator"),
                        hexbytes=raw_hex,
                    )
        except Exception as e:
            logging.error(f"Failed to create spot ({e}): {original_line}")


if __name__ == "__main__":
    args = docopt(__doc__)

    logging.warning(f"Starting pskreporter-sender with args {args}")

    file = args["<logfile>"]
    mode = args["<mode>"]

    if not mode:
        if "ft8" in file.lower():
            mode = "ft8"
        elif "ft4" in file.lower():
            mode = "ft4"
        elif "wspr" in file.lower():
            mode = "wspr"

    if not mode:
        sys.exit("Need to provide the mode argument")

    if not args["--callsign"]:
        sys.exit("Need to provide the callsign argument")

    if not args["--locator"]:
        sys.exit("Need to provide the locator argument")

    pskreporter = PskReporter(
        callsign=args["--callsign"].upper(),
        grid=args["--locator"],
        antenna=args["--antenna"],
        dummy=args["--no-send"],
        tcp=args["--tcp"],
    )

    proc = subprocess.Popen(["tail", "-F", file], stdout=subprocess.PIPE)

    # Set up signal handlers for graceful shutdown
    def signal_handler(signum, frame):
        print(f"\nReceived signal {signum}, shutting down gracefully...")
        raise KeyboardInterrupt

    signal.signal(signal.SIGTERM, signal_handler)
    signal.signal(signal.SIGINT, signal_handler)

    try:
        if mode == "wspr":
            do_wspr(proc.stdout, pskreporter, mode.upper())
        else:
            submit(proc.stdout, pskreporter, mode.upper())
    except KeyboardInterrupt:
        pass
    except Exception as e:
        logging.error(f"Unexpected error: {e}")
    finally:
        # Disable signal handlers during cleanup to prevent threading issues
        signal.signal(signal.SIGTERM, signal.SIG_DFL)
        signal.signal(signal.SIGINT, signal.SIG_DFL)

        try:
            pskreporter.close()
            print("Final upload completed successfully.")
        except Exception as e:
            logging.error(f"Error during final upload: {e}")
        finally:
            proc.terminate()
            proc.wait()
            sys.exit(0)
